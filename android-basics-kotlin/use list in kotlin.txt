fun main() {
    
    //====================================
    // List 
    //====================================
    /* 
    val numbers = listOf(1, 2, 3, 4, 5, 6)
    println("List : ${numbers}")
    println("Size : ${numbers.size}")
    
    println("First element: ${numbers[0]}")
    println("Second element: ${numbers[1]}")
    
    println("Last index: ${numbers.size -1}")
    println("Last element: ${numbers[numbers.size-1]}")
    
    println("First: ${numbers.first()}")
    println("Last: ${numbers.last()}")
    
	println("Contains 4? ${numbers.contains(4)}")
    println("Contains 7? ${numbers.contains(7)}")
    */
    
    /*
    val colors = listOf("green", "orange", "blue")
    //colors.add("purple")
    //colors[0] = "yellow"
    println("Reverse list : ${colors.reversed()}")
    println("List: $colors")
    
    println("Sorted list: ${colors.sorted()}")
    
    val oddNumbers = listOf(5, 3, 7, 1)
    println("List: $oddNumbers")
    println("Sorted list: ${oddNumbers.sorted()}")
    */
    
    //====================================
    // MutableList 
    //====================================
    //val entrees = mutableListOf<String>()
    /*
     * val entrees: MutableList<String> = mutableListOf()
	
    println("Entrees: ${entrees}")
    println("Add noodles: ${entrees.add("noodles")}")
    println("Entrees: ${entrees}")
    
    println("Add spaghetti: ${entrees.add("spaghetti")}")
    println("Entrees: ${entrees}")

	val moreItems = listOf("ravioli", "lasagna", "fettuccine")
    println("Add list: ${entrees.addAll(moreItems)}")
    println("Entrees: ${entrees}")
    */
    
    /*
    val guestsPerFamily = listOf(2, 4, 1, 3)
    
    var totalGuests = 0
    var index = 0
    
    while (index < guestsPerFamily.size){
        totalGuests += guestsPerFamily[index]
        index++
    }
    
    println("Total Guest Count: ${totalGuests}")
    
    
    val names = listOf("Jessica", "Henry", "Alicia", "Jose")
    
    for (name in names){
        //println(name)
        println("$name - Number of characters : ${name.length}")
    }
    
    */
    
    /*
  	val noodles = Noodles()
    //val vegetables = Vegetables()
    //val vegetables = Vegetables("Cabbage", "Sprouts", "Onion")
    //val vegetables = Vegetables(listOf("Cabbage", "Sprouts", "Onion"))
    val vegetables = Vegetables("Cabbage", "Sprouts", "Onion")
    val vegetables2 = Vegetables()
    println(noodles)
    println(vegetables)
    println(vegetables2)
    */
    
    val ordersList = mutableListOf<Order>()
    
    val order1 = Order(1)
    order1.addItem(Noodles())
    ordersList.add(order1)
    //order1.print()

    //println()

    val order2 = Order(2)
    order2.addItem(Noodles())
    order2.addItem(Vegetables())
    ordersList.add(order2)
    //order2.print()

    //println()

    val order3 = Order(3)
    val items = listOf(Noodles(), Vegetables("Carrots", "Beans", "Celery"))
    order3.addAll(items)
    ordersList.add(order3)
    //order3.print()
    
    val order4 = Order(4).addItem(Noodles()).addItem(Vegetables("Cabbage", "Onion"))
	ordersList.add(order4)
    
    ordersList.add(
    Order(5)
        .addItem(Noodles())
        .addItem(Noodles())
        .addItem(Vegetables("Spinach")))
    
    for (order in ordersList) {
        order.print()
        println()
    }
}
 

open class Item(val name: String, val price: Int)
    
class Noodles : Item("Noodles", 10){
    override fun toString(): String{
        return name
    }
}

//class Vegetables(val toppings: List<String) : Item("vegetables", 5){
class Vegetables(vararg val toppings: String) : Item("vegetables", 5){
    override fun toString(): String{
        
        if(toppings.isEmpty()){
            return "$name Chef's Choice"
        }else{
        	return name + " " + toppings.joinToString()    
        }
        
    }
}

class Order(val orderNumber: Int){
    private val itemList = mutableListOf<Item>()
    
    fun addItem(newItem: Item): Order{
        itemList.add(newItem)
        return this
    }
    
    fun addAll(newItems: List<Item>): Order{
        itemList.addAll(newItems)
        return this
    }
    
    fun print() {
        println("Order #${orderNumber}")
        var total = 0
        for (item in itemList) {
            println("${item}: $${item.price}")
            total += item.price
        }
        println("Total: $${total}")
	}
}





















